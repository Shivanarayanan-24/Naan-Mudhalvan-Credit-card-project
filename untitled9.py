# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lSXYVENhhBpIT2BWDWtoKrfefl1gozb-
"""

# Step 1: Import required libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score, roc_curve

# Step 2: Load the dataset
df = pd.read_csv('/content/credit_card_fraud_dataset.csv')

# Step 3: Basic data overview
print("Dataset shape:", df.shape)
print(df.info())
print("Missing values:\n", df.isnull().sum())

# Step 4: Visualize class distribution
sns.countplot(x='Class', data=df)
plt.title("Distribution of Transaction Classes (0: Legit, 1: Fraud)")
plt.show()

# Step 5: Separate features and target
X = df.drop('Class', axis=1)
y = df['Class']

# Step 6: Feature scaling
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Step 7: Train-test split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, stratify=y, random_state=42)

# Step 8: Train the model
rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)

# Step 9: Predictions and evaluation
y_pred = rf.predict(X_test)
y_proba = rf.predict_proba(X_test)[:, 1]

print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))
print("ROC AUC Score:", roc_auc_score(y_test, y_proba))

# Step 10: Plot ROC Curve
fpr, tpr, _ = roc_curve(y_test, y_proba)
plt.figure(figsize=(8,6))
plt.plot(fpr, tpr, label='AUC = %.3f' % roc_auc_score(y_test, y_proba))
plt.plot([0, 1], [0, 1], 'k--')  # random guess line
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve - Random Forest')
plt.legend()
plt.grid()
plt.show()

# Step 1: Import required libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score, roc_curve

# Step 2: Load your dataset
df = pd.read_csv('/content/credit_card_fraud_dataset.csv')  # Adjust path if needed

# Step 3: Print column names to find the correct target column
print("Column names in your dataset:\n", df.columns)

# Step 4: Preview data
print("\nSample data:\n", df.head())

# Step 5: Make sure target column is correctly named
# If the fraud label column is not called "Class", find the correct one from print output
# Example: If it's called 'Fraud' instead, change this line:
target_column = 'IsFraud'  # <-- change this to match the actual name, e.g., 'isFraud'

# Step 6: Check if column exists
if target_column not in df.columns:
    raise ValueError(f"Target column '{target_column}' not found. Please update it to match the correct column name from your dataset.")

# Step 7: Visualize class distribution
sns.countplot(x=target_column, data=df)
plt.title("Distribution of Transaction Classes")
plt.show()

# Step 8: Prepare features and labels
X = df.drop(target_column, axis=1)
y = df[target_column]

# Step 9: Scale the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Step 10: Split dataset
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, stratify=y, random_state=42)

# Step 11: Train Random Forest
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Step 12: Predict and evaluate
y_pred = model.predict(X_test)
y_proba = model.predict_proba(X_test)[:, 1]

print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))
print("ROC AUC Score:", roc_auc_score(y_test, y_proba))

# Step 13: Plot ROC Curve
fpr, tpr, _ = roc_curve(y_test, y_proba)
plt.plot(fpr, tpr, label=f"AUC = {roc_auc_score(y_test, y_proba):.3f}")
plt.plot([0, 1], [0, 1], 'k--')
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.title("ROC Curve")
plt.legend()
plt.grid(True)
plt.show()



# Step 1: Import required libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score, roc_curve

# Step 2: Load dataset
df = pd.read_csv('/content/credit_card_fraud_dataset.csv')

# Step 3: Drop non-numeric columns
df = df.drop(['TransactionDate', 'TransactionType', 'Location'], axis=1)

# Step 4: Define features and target
X = df.drop('IsFraud', axis=1)
y = df['IsFraud']

# Step 5: Visualize class distribution
sns.countplot(x=y)
plt.title("Transaction Class Distribution (0: Legit, 1: Fraud)")
plt.show()

# Step 6: Feature scaling
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Step 7: Train-test split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, stratify=y, random_state=42)

# Step 8: Train model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Step 9: Predictions and evaluation
y_pred = model.predict(X_test)
y_proba = model.predict_proba(X_test)[:, 1]

print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))
print("ROC AUC Score:", roc_auc_score(y_test, y_proba))

# Step 10: ROC Curve
fpr, tpr, _ = roc_curve(y_test, y_proba)
plt.figure(figsize=(8,6))
plt.plot(fpr, tpr, label=f"AUC = {roc_auc_score(y_test, y_proba):.3f}")
plt.plot([0, 1], [0, 1], 'k--')
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.title("ROC Curve")
plt.legend()
plt.grid(True)
plt.show()